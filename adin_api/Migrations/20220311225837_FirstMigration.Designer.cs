// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using adin_api.Data;

namespace adin_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220311225837_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8d5f4c90-f0fc-46ad-9413-afe0d3701531",
                            ConcurrencyStamp = "574435dd-6390-4342-99f9-d8d2670d2c30",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8872b296-a5d8-4113-b3c0-6f58a3da25b2",
                            ConcurrencyStamp = "2a76a28f-d9d8-4292-aa46-a992005765d2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "862fbcc9-5a69-4703-b466-ef1758171234",
                            RoleId = "8872b296-a5d8-4113-b3c0-6f58a3da25b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("adin_api.Data.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("component_name");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Component 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Component 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Component 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Component 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Component 5"
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Link")
                        .HasColumnType("VARCHAR(8000)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("StepImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "https://m.media-amazon.com/images/I/71VcbZYF0hL._AC_SX466_.jpg",
                            Name = "Hammer"
                        },
                        new
                        {
                            Id = 2,
                            Link = "https://mobileimages.lowes.com/productimages/8d4b8c73-1811-464f-9b22-d29608f151f0/00617143.jpg",
                            Name = "Drill"
                        },
                        new
                        {
                            Id = 3,
                            Link = "https://www.vigor-equipment.com/media/image/96/11/d6/v3613ErzzIwdipftMQ.jpg",
                            Name = "Screwdriver"
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.SafetyTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("safety_tool_name");

                    b.HasKey("Id");

                    b.ToTable("Safety_Tool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Safety tool 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Safety tool 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Safety tool 3"
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Instructions")
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("instructions");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");
                        
                    b.Property<int>("RackId")
                        .HasColumnType("integer")
                        .HasColumnName("rack_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Instructions = "Step 1 of task 1",
                            StepNumber = 1,
                            TaskId = 1,
                            RackID = 1
                        },
                        new
                        {
                            Id = 2,
                            Instructions = "Step 2 of task 1",
                            StepNumber = 2,
                            TaskId = 1,
                            RackID = 2
                        },
                        new
                        {
                            Id = 3,
                            Instructions = "Step 3 of task 1",
                            StepNumber = 3,
                            TaskId = 1,
                            RackID = 3
                        },
                        new
                        {
                            Id = 4,
                            Instructions = "Step 1 of task 2",
                            StepNumber = 1,
                            TaskId = 2,
                            RackID = 4
                        },
                        new
                        {
                            Id = 5,
                            Instructions = "Step 1 of task 3",
                            StepNumber = 1,
                            TaskId = 3,
                            RackID = 5
                        },
                        new
                        {
                            Id = 6,
                            Instructions = "Step 2 of task 3",
                            StepNumber = 2,
                            TaskId = 3,
                            RackID = 6
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.StepComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer")
                        .HasColumnName("component_id");

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("StepId");

                    b.ToTable("Step_Component");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentId = 1,
                            StepId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComponentId = 2,
                            StepId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComponentId = 3,
                            StepId = 2
                        },
                        new
                        {
                            Id = 4,
                            ComponentId = 4,
                            StepId = 3
                        },
                        new
                        {
                            Id = 5,
                            ComponentId = 5,
                            StepId = 4
                        },
                        new
                        {
                            Id = 6,
                            ComponentId = 2,
                            StepId = 5
                        },
                        new
                        {
                            Id = 7,
                            ComponentId = 3,
                            StepId = 5
                        },
                        new
                        {
                            Id = 8,
                            ComponentId = 5,
                            StepId = 6
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.StepImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("stepimage_id");

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("StepId");

                    b.ToTable("Step_Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageId = 1,
                            StepId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageId = 2,
                            StepId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageId = 3,
                            StepId = 2
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.StepSafetyTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SafetyToolId")
                        .HasColumnType("integer")
                        .HasColumnName("safety_tool_id");

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    b.HasKey("Id");

                    b.HasIndex("SafetyToolId");

                    b.HasIndex("StepId");

                    b.ToTable("Step_Safety_Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SafetyToolId = 3,
                            StepId = 2
                        },
                        new
                        {
                            Id = 2,
                            SafetyToolId = 2,
                            StepId = 3
                        },
                        new
                        {
                            Id = 3,
                            SafetyToolId = 1,
                            StepId = 6
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.StepTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("StepId")
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    b.Property<int>("ToolId")
                        .HasColumnType("integer")
                        .HasColumnName("tool_id");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("ToolId");

                    b.ToTable("Step_Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StepId = 1,
                            ToolId = 1
                        },
                        new
                        {
                            Id = 2,
                            StepId = 2,
                            ToolId = 2
                        },
                        new
                        {
                            Id = 3,
                            StepId = 3,
                            ToolId = 3
                        },
                        new
                        {
                            Id = 4,
                            StepId = 4,
                            ToolId = 2
                        },
                        new
                        {
                            Id = 5,
                            StepId = 5,
                            ToolId = 3
                        },
                        new
                        {
                            Id = 6,
                            StepId = 6,
                            ToolId = 4
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TaskDescription")
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("task_description");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskDescription = "Task 1"
                        },
                        new
                        {
                            Id = 2,
                            TaskDescription = "Task 2"
                        },
                        new
                        {
                            Id = 3,
                            TaskDescription = "Task 3"
                        },
                        new
                        {
                            Id = 4,
                            TaskDescription = "Task 4"
                        },
                        new
                        {
                            Id = 5,
                            TaskDescription = "Task 5"
                        },
                        new
                        {
                            Id = 6,
                            TaskDescription = "Task 6"
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tool_name");

                    b.HasKey("Id");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tool 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tool 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tool 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tool 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tool 5"
                        });
                });

            modelBuilder.Entity("adin_api.Data.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "862fbcc9-5a69-4703-b466-ef1758171234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2268302-4e9f-4492-95ea-73de44697263",
                            Email = "knezevic@etf.rs",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KNEZEVIC@ETF.RS",
                            NormalizedUserName = "KNEZEVIC@ETF.RS",
                            PasswordHash = "AQAAAAEAACcQAAAAELLbUJfcY2AhemC+IeRr8wCXLCAZnfz4AOyavyLGsin2sx3Nc4eimdzlvKdciKS3PQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53284f7f-3b8a-4854-9ac7-fc530723fdfa",
                            TwoFactorEnabled = false,
                            UserName = "knezevic@etf.rs",
                            FirstName = "Nikola",
                            LastName = "Knežević"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adin_api.Data.Models.Step", b =>
                {
                    b.HasOne("adin_api.Data.Models.Task", "Task")
                        .WithMany("Steps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("adin_api.Data.Models.StepComponent", b =>
                {
                    b.HasOne("adin_api.Data.Models.Component", "Component")
                        .WithMany("ComponentSteps")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adin_api.Data.Models.Step", "Step")
                        .WithMany("StepComponents")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("adin_api.Data.Models.StepImage", b =>
                {
                    b.HasOne("adin_api.Data.Models.Image", "Image")
                        .WithMany("StepImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adin_api.Data.Models.Step", "Step")
                        .WithMany("StepImages")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("adin_api.Data.Models.StepSafetyTool", b =>
                {
                    b.HasOne("adin_api.Data.Models.SafetyTool", "SafetyTool")
                        .WithMany("SafetyToolSteps")
                        .HasForeignKey("SafetyToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adin_api.Data.Models.Step", "Step")
                        .WithMany("StepSafetyTools")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyTool");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("adin_api.Data.Models.StepTool", b =>
                {
                    b.HasOne("adin_api.Data.Models.Step", "Step")
                        .WithMany("StepTools")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adin_api.Data.Models.Tool", "Tool")
                        .WithMany("Tools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("adin_api.Data.Models.Component", b =>
                {
                    b.Navigation("ComponentSteps");
                });

            modelBuilder.Entity("adin_api.Data.Models.Image", b =>
                {
                    b.Navigation("StepImages");
                });

            modelBuilder.Entity("adin_api.Data.Models.SafetyTool", b =>
                {
                    b.Navigation("SafetyToolSteps");
                });

            modelBuilder.Entity("adin_api.Data.Models.Step", b =>
                {
                    b.Navigation("StepComponents");

                    b.Navigation("StepImages");

                    b.Navigation("StepSafetyTools");

                    b.Navigation("StepTools");
                });

            modelBuilder.Entity("adin_api.Data.Models.Task", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("adin_api.Data.Models.Tool", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
